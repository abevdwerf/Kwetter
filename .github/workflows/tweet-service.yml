name: tweet service

on:
  push:
    branches: [ "master" ]
    # paths:
    #  - 'tweet-service/**'
  pull_request:
    branches: [ "master" ]

env:
    ACR_RESOURCE_GROUP: kwetter
    AZURE_CONTAINER_REGISTRY: acrworkflow1719055015818
    CLUSTER_NAME: kwetter-cluster
    CLUSTER_RESOURCE_GROUP: kwetter
    CONTAINER_NAME: image-workflow-1719055015818
    DEPLOYMENT_MANIFEST_PATH: |
        ./K8S/bootstrap/tweet/tweet-deployment.yaml
        ./K8S/bootstrap/tweet/tweet-service.yaml
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 21
      uses: actions/setup-java@v3
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: maven
    - name: Build without tests
      run: mvn clean install -DskipTests --file tweet-service/pom.xml
    - uses: actions/upload-artifact@v4
      with:
        name: tweet-service-artifact
        path: tweet-service/target/*.jar
      
  unit_tests:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven
      - name: Run unit tests
        run: mvn clean test -P unit-tests --file tweet-service/pom.xml

  integration_tests:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Set up JDK 21
      uses: actions/setup-java@v3
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: maven
    - name: Run integration tests
      run: mvn clean verify -P integration-tests --file tweet-service/pom.xml

  # e2e_tests:
  #   runs-on: ubuntu-latest
  #   needs: [unit_tests, integration_tests]
  #   steps:
  #   # Steps for setting up environment, checkout, JDK, caching, etc.
  #   - name: Run end-to-end tests
  #     run: mvn verify --file tweet-service/pom.xml

  sonarcloud:
    runs-on: ubuntu-latest
    needs: [integration_tests]
    steps:
    - uses: actions/checkout@v4
      with:
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis
    - name: Set up JDK 21
      uses: actions/setup-java@v3
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: maven
    - name: Cache SonarCloud packages
      uses: actions/cache@v3
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar
    - name: Cache Maven packages
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    - name: Build with Maven and analyze
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: mvn -B org.jacoco:jacoco-maven-plugin:prepare-agent verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Pcoverage -Dsonar.projectKey=abevdwerf_Kwetter package --file tweet-service/pom.xml
  
  docker_build_and_push:
    runs-on: ubuntu-latest
    needs: [sonarcloud]
    steps:
    - uses: actions/checkout@v4
    - name: download artifact
      uses: actions/download-artifact@v4
      with:
        name: tweet-service-artifact
        path: tweet-service/target/
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Build and push
      uses: docker/build-push-action@v5
      with:
        context: "tweet-service"
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/tweet-service:latest
  deploy:
      permissions:
          actions: read
          contents: read
          id-token: write
      runs-on: ubuntu-latest
      needs:
          - docker_build_and_push
      steps:
          - uses: actions/checkout@v3
          - uses: azure/login@92a5484dfaf04ca78a94597f4f19fea633851fa2
            name: Azure login
            with:
              client-id: ${{ secrets.AZURE_CLIENT_ID }}
              subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
              tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          - uses: azure/use-kubelogin@v1
            name: Set up kubelogin for non-interactive login
            with:
              kubelogin-version: v0.0.25
          - uses: azure/aks-set-context@v3
            name: Get K8s context
            with:
              admin: "false"
              cluster-name: ${{ env.CLUSTER_NAME }}
              resource-group: ${{ env.CLUSTER_RESOURCE_GROUP }}
              use-kubelogin: "true"
          - uses: Azure/k8s-deploy@v4
            name: Deploys application
            with:
              action: deploy
              # images: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.CONTAINER_NAME }}:${{ github.sha }}
              manifests: ${{ env.DEPLOYMENT_MANIFEST_PATH }}
              namespace: default

